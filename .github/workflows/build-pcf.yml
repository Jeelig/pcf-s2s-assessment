name: Build PCF Solution

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop

jobs:
  pcf-build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    defaults:
      run:
        shell: pwsh
        working-directory: AssessmentPCFControl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Compute package version
        id: version
        run: |
          $major = 1
          $baseMinor = 0
          $runNumber = [int]$env:GITHUB_RUN_NUMBER
          $minor = $baseMinor + [math]::Floor($runNumber / 1000)
          $patch = $runNumber % 1000
          $version = "{0}.{1}.{2}" -f $major, $minor, $patch
          if ($patch -eq 0 -and $runNumber -ne 0) {
            $version = "{0}.{1}.0" -f $major, $minor
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$version"

      - name: Update control manifest version
        run: |
          $version = '${{ steps.version.outputs.version }}'
          $manifestPath = 'AssessmentControl/ControlManifest.Input.xml'
          [xml]$manifest = Get-Content -Path $manifestPath
          $manifest.manifest.control.version = $version
          $manifest.Save($manifestPath)

      - name: Install dependencies
        run: npm ci

      - name: Build PCF control
        run: npm run build

      - name: Upload control bundle
        uses: actions/upload-artifact@v4
        with:
          name: assessment-pcf-control
          path: AssessmentPCFControl/out

  solution-build:
    runs-on: windows-latest
    needs: pcf-build
    permissions:
      packages: write
      contents: write
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.x

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: AssessmentPCFControl

      - name: Update solution version
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          Write-Host "Setting solution version to $version"
          $solutionPath = 'src/Other/Solution.xml'
          [xml]$solutionXml = Get-Content -Path $solutionPath
          $solutionXml.ImportExportXml.SolutionManifest.Version = $version
          $solutionXml.Save($solutionPath)

      - name: Build Power Platform solution
        run: dotnet build AssessmentPCF.cdsproj /p:Configuration=Release

      - name: Rename solution packages
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $releaseDir = Join-Path $PWD 'bin/Release'
          $unmanagedSource = Join-Path $releaseDir 'AssessmentPCF.zip'
          $managedSource = Join-Path $releaseDir 'AssessmentPCF_managed.zip'
          if (Test-Path $unmanagedSource) {
            $unmanagedTarget = Join-Path $releaseDir ("AssessmentPCF_v{0}.zip" -f $version)
            Move-Item -Path $unmanagedSource -Destination $unmanagedTarget -Force
          }
          if (Test-Path $managedSource) {
            $managedTarget = Join-Path $releaseDir ("AssessmentPCF_managed_v{0}.zip" -f $version)
            Move-Item -Path $managedSource -Destination $managedTarget -Force
          }

      - name: Validate solution package structure
        run: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $required = @('solution.xml','customizations.xml','[Content_Types].xml')
          Get-ChildItem -Path bin/Release -Filter '*.zip' | ForEach-Object {
            $zip = [IO.Compression.ZipFile]::OpenRead($_.FullName)
            try {
              $entries = $zip.Entries.FullName
              foreach ($file in $required) {
                if (-not ($entries -contains $file)) {
                  throw "Package '$($_.Name)' is missing required root file '$file'."
                }
              }
            } finally {
              $zip.Dispose()
            }
          }

      - name: Publish solution package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $tag = "v$version"
          $asset = "bin/Release/AssessmentPCF_v$version.zip"
          Write-Host "Publishing release $tag with asset $asset"
          gh release view $tag > $null 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Release $tag exists. Deleting before recreate."
            gh release delete $tag --yes
          }
          gh release create $tag $asset --title "AssessmentPCF v$version" --notes "Automated build ${{ github.run_number }}"
