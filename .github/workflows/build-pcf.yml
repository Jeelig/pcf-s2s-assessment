name: Build PCF Solution

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop

jobs:
  pcf-build:
    runs-on: windows-latest
    permissions:
      actions: write
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    defaults:
      run:
        shell: pwsh
        working-directory: AssessmentPCFControl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Bump PCF version
        id: version
        env:
          CURRENT_VERSION: ${{ vars.PCF_VERSION }}
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          $current = $env:CURRENT_VERSION
          if ([string]::IsNullOrWhiteSpace($current)) {
            throw "PCF_VERSION is not set in repository variables."
          }

          try {
            [version]$v = $current
          } catch {
            throw "Invalid PCF_VERSION: '$current'. Use Major.Minor.Patch"
          }

          $patch = $v.Build
          if ($patch -lt 100) { $patch++ } else { $v = [version]"$($v.Major).$($v.Minor + 1).0" }

          $newVersion = "$($v.Major).$($v.Minor).$patch"

          gh api -X PATCH "repos/$env:GITHUB_REPOSITORY/actions/variables/PCF_VERSION" `
            -f name=PCF_VERSION -f value=$newVersion > $null

          Write-Host "Bumped PCF_VERSION: $current to $newVersion"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$newVersion"

      - name: Update ControlManifest.Input.xml (in AssessmentControl/)
        run: |
          $version = '${{ steps.version.outputs.version }}'
          $manifestPath = 'AssessmentControl/ControlManifest.Input.xml'

          if (-not (Test-Path $manifestPath)) {
            Write-Host "Current dir: $PWD"
            Write-Host "Files in AssessmentControl/:"
            if (Test-Path 'AssessmentControl') {
              Get-ChildItem 'AssessmentControl' -Name
            } else {
              Write-Host "AssessmentControl/ folder missing!"
            }
            throw "ControlManifest.Input.xml NOT FOUND at $manifestPath"
          }

          Write-Host "Updating $manifestPath to version $version"
          [xml]$xml = Get-Content $manifestPath -Raw
          $old = $xml.manifest.control.version
          $xml.manifest.control.version = $version
          $xml.Save($manifestPath)

          Write-Host "Updated: $old to $version"
          Write-Host "##[group]Updated manifest snippet"
          Get-Content $manifestPath | Select-String 'version=' -Context 0,2
          Write-Host "##[endgroup]"

      - name: Install dependencies
        run: npm ci

      - name: Clean previous build
        run: |
          if (Test-Path 'out') {
            Remove-Item -Recurse -Force 'out'
            Write-Host "Cleaned out/ folder"
          }

      - name: Build PCF control
        run: npm run build

      - name: Validate built ControlManifest.xml version
        run: |
          $outManifest = 'out/ControlManifest.xml'
          if (-not (Test-Path $outManifest)) {
            throw "Build failed: $outManifest not generated."
          }

          $expected = '${{ steps.version.outputs.version }}'
          $line = Select-String -Path $outManifest -Pattern 'version="' | Select-Object -First 1
          if ($line -match 'version="([^"]+)"') {
            $actual = $matches[1]
            if ($actual -eq $expected) {
              Write-Host "Built manifest version: $actual"
            } else {
              throw "VERSION MISMATCH! Expected: $expected, Got: $actual"
            }
          } else {
            throw "Failed to parse version from $outManifest"
          }

      - name: Upload PCF control artifact
        uses: actions/upload-artifact@v4
        with:
          name: assessment-pcf-control
          path: out/
          retention-days: 7
          if-no-files-found: error

  # === SOLUTION BUILD (inchangÃ©, juste version propagÃ©e) ===
  solution-build:
    runs-on: windows-latest
    needs: pcf-build
    permissions:
      contents: write
      packages: write
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.x

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Install PCF dependencies
        run: npm ci
        working-directory: AssessmentPCFControl

      - name: Update solution version
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $path = 'src/Other/Solution.xml'
          [xml]$xml = Get-Content $path -Raw
          $xml.ImportExportXml.SolutionManifest.Version = $version
          $xml.Save($path)
          Write-Host "Solution.xml version to $version"

      - name: Build solution
        run: dotnet build AssessmentPCF.cdsproj /p:Configuration=Release

      - name: Rename packages
        run: |
          $v = '${{ needs.pcf-build.outputs.version }}'
          $dir = 'bin/Release'
          @('AssessmentPCF.zip', 'AssessmentPCF_managed.zip') | ForEach-Object {
            $src = "$dirWorkflow/$_"
            if (Test-Path $src) {
              $dst = $src -replace '\.zip$', "_v$v.zip"
              Move-Item $src $dst -Force
            }
          }

      - name: Validate packages
        run: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $req = @('solution.xml','customizations.xml','[Content_Types].xml')
          Get-ChildItem bin/Release -Filter *.zip | ForEach-Object {
            $zip = [IO.Compression.ZipFile]::OpenRead($_.FullName)
            $entries = $zip.Entries.FullName
            $req | Where-Object { $entries -notcontains $_ } | ForEach-Object {
              throw "MISSING in $($_.Name): $_"
            }
            $zip.Dispose()
          }

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $v = '${{ needs.pcf-build.outputs.version }}'
          $tag = "v$v"
          $asset = "bin/Release/AssessmentPCF_v$v.zip"
          gh release delete $tag --yes --cleanup-tag 2>$null || true
          gh release create $tag $asset --title "v$v" --notes "Build #${{ github.run_number }}"