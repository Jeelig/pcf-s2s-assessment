name: Build PCF Solution

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop

jobs:
  pcf-build:
    runs-on: windows-latest
    permissions:
      actions: write
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    defaults:
      run:
        shell: pwsh
        working-directory: AssessmentPCFControl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Bump PCF version
        id: version
        env:
          CURRENT_VERSION: ${{ vars.PCF_VERSION }}
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          $current = $env:CURRENT_VERSION
          if ([string]::IsNullOrWhiteSpace($current)) {
            throw "Repository variable PCF_VERSION is not defined."
          }

          try {
            [version]$parsed = $current
          } catch {
            throw "PCF_VERSION '$current' is not a valid semantic version (expected format Major.Minor.Patch)."
          }

          $major = $parsed.Major
          $minor = $parsed.Minor
          $patch = $parsed.Build

          if ($patch -lt 100) {
            $patch++
          } else {
            $minor++
            $patch = 0
          }

          $version = "{0}.{1}.{2}" -f $major, $minor, $patch

          gh api -X PATCH "repos/$env:GITHUB_REPOSITORY/actions/variables/PCF_VERSION" `
            -f name=PCF_VERSION -f value=$version > $null

          Write-Host "✅ Bumped PCF_VERSION from $current to $version"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$version"

      - name: Update ControlManifest.Input.xml
        run: |
          $version = '${{ steps.version.outputs.version }}'
          $manifestPath = 'AssessmentControl/ControlManifest.Input.xml'
          if (-not (Test-Path $manifestPath)) {
            throw "Manifest file not found: $manifestPath"
          }

          Write-Host "🔧 Updating manifest version to $version"
          [xml]$manifest = Get-Content -Path $manifestPath -Raw
          $manifest.manifest.control.version = $version
          $manifest.Save($manifestPath)

          Write-Host "✅ ControlManifest.Input.xml updated to version $version"
          Select-String -Path $manifestPath -Pattern "version=" | Select-Object -First 1

      - name: Install dependencies
        run: npm ci

      - name: Clean previous builds
        run: |
          if (Test-Path "out") { Remove-Item "out" -Recurse -Force }
          Write-Host "🧹 Cleaned output folder."

      - name: Build PCF control
        run: npm run build

      - name: Validate built manifest version
        run: |
          $expected = '${{ steps.version.outputs.version }}'
          $manifest = Get-ChildItem -Path "out" -Filter "ControlManifest.xml" -Recurse | Select-Object -First 1
          if (-not $manifest) {
            throw "❌ ControlManifest.xml not found in build output."
          }

          $content = Get-Content -Path $manifest.FullName -Raw
          if ($content -match "version=`"$expected`"") {
            Write-Host "✅ Built manifest version matches expected $expected"
          } else {
            Write-Host "❌ Version mismatch in built manifest!"
            Write-Host "Expected: $expected"
            Write-Host "Found:    " + ($content | Select-String 'version="' | Select-Object -First 1)
            throw "ControlManifest.xml version not updated correctly."
          }

      - name: Upload control bundle
        uses: actions/upload-artifact@v4
        with:
          name: assessment-pcf-control
          path: out/
          retention-days: 7

  solution-build:
    runs-on: windows-latest
    needs: pcf-build
    permissions:
      contents: write
      packages: write
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.x

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Install PCF dependencies
        run: npm ci
        working-directory: AssessmentPCFControl

      - name: Update solution version
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          Write-Host "🔧 Setting solution version to $version"
          $solutionPath = 'src/Other/Solution.xml'
          [xml]$solutionXml = Get-Content -Path $solutionPath -Raw
          $solutionXml.ImportExportXml.SolutionManifest.Version = $version
          $solutionXml.Save($solutionPath)

      - name: Build Power Platform solution
        run: dotnet build AssessmentPCF.cdsproj /p:Configuration=Release

      - name: Rename solution packages
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $releaseDir = Join-Path $PWD 'bin/Release'
          $unmanagedSource = Join-Path $releaseDir 'AssessmentPCF.zip'
          $managedSource = Join-Path $releaseDir 'AssessmentPCF_managed.zip'

          if (Test-Path $unmanagedSource) {
            $target = Join-Path $releaseDir ("AssessmentPCF_v{0}.zip" -f $version)
            Move-Item -Path $unmanagedSource -Destination $target -Force
            Write-Host "Renamed unmanaged solution to $target"
          }

          if (Test-Path $managedSource) {
            $target = Join-Path $releaseDir ("AssessmentPCF_managed_v{0}.zip" -f $version)
            Move-Item -Path $managedSource -Destination $target -Force
            Write-Host "Renamed managed solution to $target"
          }

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $tag = "v$version"
          $asset = "bin/Release/AssessmentPCF_v$version.zip"

          if (-not (Test-Path $asset)) {
            throw "❌ Release asset not found: $asset"
          }

          Write-Host "📦 Creating GitHub release: $tag"
          gh release view $tag > $null 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Deleting existing release..."
            gh release delete $tag --yes --cleanup-tag
          }

          gh release create $tag $asset `
            --title "AssessmentPCF v$version" `
            --notes "Automated build #${{ github.run_number }}"

          Write-Host "✅ Release $tag published successfully."
