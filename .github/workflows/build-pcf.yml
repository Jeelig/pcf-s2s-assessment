name: Build PCF Solution

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop

jobs:
  pcf-build:
    runs-on: windows-latest
    permissions:
      actions: write
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    defaults:
      run:
        shell: pwsh
        working-directory: AssessmentPCFControl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Bump PCF version
        id: version
        env:
          CURRENT_VERSION: ${{ vars.PCF_VERSION }}
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          $current = $env:CURRENT_VERSION
          if ([string]::IsNullOrWhiteSpace($current)) {
            throw "PCF_VERSION is not set in repository variables."
          }

          try {
            [version]$v = $current
          } catch {
            throw "Invalid PCF_VERSION: '$current'. Use Major.Minor.Patch"
          }

          $major = $v.Major
          $minor = $v.Minor
          $patch = $v.Build

          if ($patch -lt 100) {
            $patch++
          } else {
            $minor++
            $patch = 0
          }

          $newVersion = "$major.$minor.$patch"

          gh api -X PATCH "repos/$env:GITHUB_REPOSITORY/actions/variables/PCF_VERSION" `
            -f name=PCF_VERSION -f value=$newVersion > $null

          Write-Host "Bumped PCF_VERSION: $current to $newVersion"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$newVersion"

      - name: Update ControlManifest.Input.xml (in AssessmentControl/)
        run: |
          $version = '${{ steps.version.outputs.version }}'
          $manifestPath = 'AssessmentControl/ControlManifest.Input.xml'

          if (-not (Test-Path $manifestPath)) {
            Write-Host "Current dir: $PWD"
            Write-Host "Files in AssessmentControl/:"
            if (Test-Path 'AssessmentControl') {
              Get-ChildItem 'AssessmentControl' -Name | Sort-Object
            } else {
              Write-Host "AssessmentControl/ folder missing!"
            }
            throw "ControlManifest.Input.xml NOT FOUND at $manifestPath"
          }

          # Load XML to get old version
          [xml]$xml = Get-Content $manifestPath -Raw
          $oldVersion = $xml.manifest.control.version
          if (-not $oldVersion) {
            throw "Failed to parse old version from XML"
          }
          Write-Host "Old version: $oldVersion"

          # String replace for reliability
          $content = Get-Content $manifestPath -Raw
          $content = $content -replace "version=`"$oldVersion`"", "version=`"$version`""
          Set-Content -Path $manifestPath -Value $content -Encoding UTF8

          Write-Host "Updated version to $version using string replace"

          # Verify update
          $updatedContent = Get-Content $manifestPath -Raw
          if ($updatedContent -notmatch "version=`"$version`"") {
            throw "Update failed: Version $version not found in file after update"
          }
          Write-Host "##[group]Updated manifest snippet"
          $updatedContent | Select-String 'version=' -Context 0,2
          Write-Host "##[endgroup]"

      - name: Install dependencies
        run: npm ci

      - name: Clean previous build
        run: |
          if (Test-Path 'out') {
            Remove-Item -Recurse -Force 'out'
            Write-Host "Cleaned out/ folder"
          } else {
            Write-Host "No out/ folder to clean"
          }

      - name: Build PCF control
        run: npm run build

      - name: üîç DEBUG - FULL PROJECT STRUCTURE AFTER BUILD
        run: |
          Write-Host "##[group]=== ROOT PROJECT ==="
          Get-ChildItem -Name | Sort-Object
          Write-Host "##[endgroup]"
          
          Write-Host "##[group]=== AssessmentControl/ ==="
          if (Test-Path 'AssessmentControl') {
            Get-ChildItem 'AssessmentControl' -Recurse -Name | Sort-Object
          }
          Write-Host "##[endgroup]"
          
          Write-Host "##[group]=== out/ FOLDER (if exists) ==="
          if (Test-Path 'out') {
            Write-Host "out/ exists!"
            Get-ChildItem 'out' -Recurse -Name | Sort-Object
          } else {
            Write-Host "‚ùå out/ DOES NOT EXIST!"
          }
          Write-Host "##[endgroup]"
          
          Write-Host "##[group]=== POSSIBLE MANIFEST LOCATIONS ==="
          $possiblePaths = @(
            'out/ControlManifest.xml',
            'out/controls/AssessmentControl/manifest.xml',
            'out/AssessmentControl/ControlManifest.xml',
            'out/bundle.js',
            'out/index.js'
          )
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              Write-Host "‚úÖ FOUND: $path"
              if ($path -like '*.xml') {
                $content = Get-Content $path -Raw
                if ($content -match 'version="([^"]+)"') {
                  Write-Host "   üìù Version: $($matches[1])"
                }
              }
            } else {
              Write-Host "‚ùå MISSING: $path"
            }
          }
          Write-Host "##[endgroup]"

      - name: Upload FULL out/ for inspection
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-full-out-folder
          path: out/
          retention-days: 30
          if-no-files-found: warn

      - name: Validate built ControlManifest.xml version
        run: |
          Write-Host "üîç Searching for ControlManifest.xml in ALL possible locations..."
          
          $possibleManifests = @(
            'out/ControlManifest.xml',
            'out/controls/rc-s/AssessmentControl/ControlManifest.xml',
            'out/controls/AssessmentControl/ControlManifest.xml',
            'out/AssessmentControl/ControlManifest.xml',
            'out/rc-s/AssessmentControl/ControlManifest.xml'
          )
          
          $foundManifest = $null
          foreach ($path in $possibleManifests) {
            if (Test-Path $path) {
              Write-Host "‚úÖ FOUND MANIFEST: $path"
              $foundManifest = $path
              break
            }
          }
          
          if (-not $foundManifest) {
            throw "‚ùå NO ControlManifest.xml found in any expected location. Check DEBUG output above."
          }
          
          $expected = '${{ steps.version.outputs.version }}'
          $content = Get-Content $foundManifest -Raw
          
          Write-Host "üìÑ Reading manifest from: $foundManifest"
          Write-Host "##[group]Full manifest content"
          Write-Host $content
          Write-Host "##[endgroup]"
          
          if ($content -match 'version="([^"]+)"') {
            $actual = $matches[1]
            Write-Host "üîç Parsed version: '$actual' (expected: '$expected')"
            if ($actual -eq $expected) {
              Write-Host "‚úÖ VERSION MATCH!"
            } else {
              throw "‚ùå VERSION MISMATCH! Expected: $expected, Got: $actual"
            }
          } else {
            throw "‚ùå No version attribute found in manifest"
          }

      - name: Upload PCF control artifact
        uses: actions/upload-artifact@v4
        with:
          name: assessment-pcf-control
          path: out/
          retention-days: 7
          if-no-files-found: error

  solution-build:
    runs-on: windows-latest
    needs: pcf-build
    permissions:
      contents: write
      packages: write
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.x

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Install PCF dependencies
        run: npm ci
        working-directory: AssessmentPCFControl

      - name: Update solution version
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $solutionPath = 'src/Other/Solution.xml'

          if (-not (Test-Path $solutionPath)) {
            throw "Solution.xml not found: $solutionPath"
          }

          [xml]$xml = Get-Content $solutionPath -Raw
          $old = $xml.ImportExportXml.SolutionManifest.Version
          $xml.ImportExportXml.SolutionManifest.Version = $version
          $xml.Save($solutionPath)

          Write-Host "Updated Solution.xml: $old ‚Üí $version"

      - name: Build Power Platform solution
        run: dotnet build AssessmentPCF.cdsproj /p:Configuration=Release

      - name: Rename solution packages
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $releaseDir = Join-Path $PWD 'bin/Release'
          $unmanagedSource = Join-Path $releaseDir 'AssessmentPCF.zip'
          $managedSource = Join-Path $releaseDir 'AssessmentPCF_managed.zip'
          if (Test-Path $unmanagedSource) {
            $unmanagedTarget = Join-Path $releaseDir ("AssessmentPCF_v{0}.zip" -f $version)
            Move-Item -Path $unmanagedSource -Destination $unmanagedTarget -Force
          }
          if (Test-Path $managedSource) {
            $managedTarget = Join-Path $releaseDir ("AssessmentPCF_managed_v{0}.zip" -f $version)
            Move-Item -Path $managedSource -Destination $managedTarget -Force
          }

      - name: Validate solution package structure
        run: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $required = @('solution.xml','customizations.xml','[Content_Types].xml')
          Get-ChildItem -Path bin/Release -Filter '*.zip' | ForEach-Object {
            $zip = [IO.Compression.ZipFile]::OpenRead($_.FullName)
            try {
              $entries = $zip.Entries.FullName
              foreach ($file in $required) {
                if (-not ($entries -contains $file)) {
                  throw "Package '$($_.Name)' is missing required root file '$file'."
                }
              }
            } finally {
              $zip.Dispose()
            }
          }

      - name: Publish solution package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $tag = "v$version"
          $asset = "bin/Release/AssessmentPCF_v$version.zip"
          Write-Host "Publishing release $tag with asset $asset"
          gh release view $tag > $null 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Release $tag exists. Deleting before recreate."
            gh release delete $tag --yes
          }
          gh release create $tag $asset --title "AssessmentPCF v$version" --notes "Automated build ${{ github.run_number }}"