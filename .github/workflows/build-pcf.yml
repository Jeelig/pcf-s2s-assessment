name: Build PCF Solution

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop

jobs:
  pcf-build:
    runs-on: windows-latest
    permissions:
      actions: write
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    defaults:
      run:
        shell: pwsh
        working-directory: AssessmentPCFControl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Bump PCF version
        id: version
        env:
          CURRENT_VERSION: ${{ vars.PCF_VERSION }}
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          $current = $env:CURRENT_VERSION
          if ([string]::IsNullOrWhiteSpace($current)) {
            throw "PCF_VERSION repository variable is not set. Go to Settings > Secrets and variables > Actions > Variables."
          }

          try {
            [version]$parsed = $current
          } catch {
            throw "PCF_VERSION '$current' is not valid. Use format: Major.Minor.Patch (e.g., 1.4.6)"
          }

          $major = $parsed.Major
          $minor = $parsed.Minor
          $patch = $parsed.Build

          if ($patch -lt 100) {
            $patch++
          } else {
            $minor++
            $patch = 0
          }

          $newVersion = "{0}.{1}.{2}" -f $major, $minor, $patch

          # Mise à jour de la variable GitHub
          gh api -X PATCH "repos/$env:GITHUB_REPOSITORY/actions/variables/PCF_VERSION" `
            -f name=PCF_VERSION -f value=$newVersion > $null

          Write-Host "Bumped PCF_VERSION: $current → $newVersion"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$newVersion"

      - name: Update ControlManifest.Input.xml version
        run: |
          $version = '${{ steps.version.outputs.version }}'
          $manifestPath = 'ControlManifest.Input.xml'

          if (-not (Test-Path $manifestPath)) {
            Write-Host "Current directory: $PWD"
            Write-Host "Files in directory:"
            Get-ChildItem -Name | Sort-Object
            throw "ControlManifest.Input.xml NOT FOUND at $manifestPath. It must be in the root of AssessmentPCFControl."
          }

          Write-Host "Updating $manifestPath → version=$version"
          [xml]$xml = Get-Content $manifestPath -Raw
          $old = $xml.manifest.control.version
          $xml.manifest.control.version = $version
          $xml.Save($manifestPath)

          Write-Host "ControlManifest.Input.xml updated: $old → $version"
          Write-Host "##[group]Manifest preview"
          Get-Content $manifestPath | Select-String 'version=' -Context 0,1
          Write-Host "##[endgroup]"

      - name: Install dependencies
        run: npm ci

      - name: Clean previous build
        run: |
          if (Test-Path 'out') {
            Remove-Item -Recurse -Force 'out'
            Write-Host "Cleaned previous 'out/' folder"
          }

      - name: Build PCF control
        run: npm run build

      - name: Validate built ControlManifest.xml
        run: |
          $outManifest = 'out/ControlManifest.xml'
          if (-not (Test-Path $outManifest)) {
            throw "Build failed: $outManifest not generated. Check 'npm run build' output."
          }

          $line = Select-String -Path $outManifest -Pattern 'version="' | Select-Object -First 1
          if ($line -match 'version="([^"]+)"') {
            $builtVersion = $matches[1]
            if ($builtVersion -eq '${{ steps.version.outputs.version }}') {
              Write-Host "Built manifest version: $builtVersion"
            } else {
              throw "VERSION MISMATCH! Expected: ${{ steps.version.outputs.version }}, Got: $builtVersion"
            }
          } else {
            throw "Could not parse version from $outManifest"
          }

      - name: Upload control bundle
        uses: actions/upload-artifact@v4
        with:
          name: assessment-pcf-control
          path: out/
          retention-days: 7
          if-no-files-found: error

  solution-build:
    runs-on: windows-latest
    needs: pcf-build
    permissions:
      contents: write
      packages: write
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.x

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Install PCF dependencies
        run: npm ci
        working-directory: AssessmentPCFControl

      - name: Update solution version
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $solutionPath = 'src/Other/Solution.xml'

          if (-not (Test-Path $solutionPath)) {
            throw "Solution.xml not found at $solutionPath"
          }

          [xml]$xml = Get-Content $solutionPath -Raw
          $old = $xml.ImportExportXml.SolutionManifest.Version
          $xml.ImportExportXml.SolutionManifest.Version = $version
          $xml.Save($solutionPath)

          Write-Host "Solution.xml version: $old → $version"

      - name: Build Power Platform solution
        run: dotnet build AssessmentPCF.cdsproj /p:Configuration=Release

      - name: Rename solution packages
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $releaseDir = 'bin/Release'
          $unmanaged = Join-Path $releaseDir 'AssessmentPCF.zip'
          $managed = Join-Path $releaseDir 'AssessmentPCF_managed.zip'

          if (Test-Path $unmanaged) {
            $target = Join-Path $releaseDir "AssessmentPCF_v$version.zip"
            Move-Item -Path $unmanaged -Destination $target -Force
            Write-Host "Renamed: AssessmentPCF.zip → AssessmentPCF_v$version.zip"
          }

          if (Test-Path $managed) {
            $target = Join-Path $releaseDir "AssessmentPCF_managed_v$version.zip"
            Move-Item -Path $managed -Destination $target -Force
            Write-Host "Renamed: AssessmentPCF_managed.zip → AssessmentPCF_managed_v$version.zip"
          }

      - name: Validate solution package structure
        run: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $required = @('solution.xml', 'customizations.xml', '[Content_Types].xml')
          $packages = Get-ChildItem -Path bin/Release -Filter '*.zip'

          if ($packages.Count -eq 0) {
            throw "No .zip files found in bin/Release/"
          }

          foreach ($pkg in $packages) {
            Write-Host "Validating package: $($pkg.Name)"
            $zip = [IO.Compression.ZipFile]::OpenRead($pkg.FullName)
            try {
              $entries = $zip.Entries.FullName
              foreach ($file in $required) {
                if ($entries -notcontains $file) {
                  throw "MISSING FILE in $($pkg.Name): $file"
                }
              }
            } finally {
              $zip.Dispose()
            }
          }
          Write-Host "All solution packages are valid."

      - name: Publish GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $tag = "v$version"
          $asset = "bin/Release/AssessmentPCF_v$version.zip"

          if (-not (Test-Path $asset)) {
            throw "Release asset not found: $asset"
          }

          Write-Host "Publishing release: $tag"
          
          # Supprime si existe
          gh release view $tag > $null 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Deleting existing release $tag..."
            gh release delete $tag --yes --cleanup-tag
          }

          # Crée la nouvelle
          gh release create $tag $asset `
            --title "AssessmentPCF v$version" `
            --notes "Automated build #${{ github.run_number }} | PCF v$version"

          Write-Host "Release $tag published with $asset"