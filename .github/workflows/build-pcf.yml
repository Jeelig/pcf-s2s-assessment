name: Build PCF Solution

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop

jobs:
  pcf-build:
    runs-on: windows-latest
    permissions:
      actions: write
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    defaults:
      run:
        shell: pwsh
        working-directory: AssessmentPCFControl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: AssessmentPCFControl/package-lock.json

      - name: Bump PCF version
        id: version
        env:
          CURRENT_VERSION: ${{ vars.PCF_VERSION }}
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          $current = $env:CURRENT_VERSION
          if ([string]::IsNullOrWhiteSpace($current)) {
            throw "PCF_VERSION is not set in repository variables."
          }

          try {
            [version]$v = $current
          } catch {
            throw "Invalid PCF_VERSION: '$current'. Use Major.Minor.Patch"
          }

          $major = $v.Major
          $minor = $v.Minor
          $patch = $v.Build

          if ($patch -lt 100) {
            $patch++
          } else {
            $minor++
            $patch = 0
          }

          $newVersion = "$major.$minor.$patch"

          gh api -X PATCH "repos/$env:GITHUB_REPOSITORY/actions/variables/PCF_VERSION" `
            -f name=PCF_VERSION -f value=$newVersion > $null

          Write-Host "Bumped PCF_VERSION: $current to $newVersion"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$newVersion"

      - name: Update ControlManifest.Input.xml
        run: |
          $version = '${{ steps.version.outputs.version }}'
          $manifestPath = 'AssessmentControl/ControlManifest.Input.xml'

          if (-not (Test-Path $manifestPath)) {
            throw "ControlManifest.Input.xml NOT FOUND at $manifestPath"
          }

          $content = Get-Content $manifestPath -Raw
          $content = $content -replace 'version="[^"]+"', "version=`"$version`""
          Set-Content -Path $manifestPath -Value $content -Encoding UTF8

          Write-Host "Updated manifest version to $version"

      - name: Install dependencies
        run: npm ci

      - name: Clean build artifacts and cache
        run: |
          if (Test-Path 'out') { Remove-Item -Recurse -Force 'out'; Write-Host "Cleaned 'out/'" }
          if (Test-Path '.pcfproj') { Remove-Item -Recurse -Force '.pcfproj' }
          if (Test-Path 'node_modules/.cache') { Remove-Item -Recurse -Force 'node_modules/.cache' }

      - name: Build PCF control (with clean)
        run: npx pcf-scripts build --clean

      - name: Debug - List out/ structure
        if: always()
        run: |
          Write-Host "=== OUT FOLDER STRUCTURE (from $PWD) ==="
          if (Test-Path 'out') {
            Get-ChildItem 'out' -Recurse | ForEach-Object {
              $depth = ($_.FullName -replace [regex]::Escape($PWD), '' -split '\\').Count - 1
              $indent = '  ' * $depth
              Write-Host "$indent$(if ($_.PSIsContainer) {'[+]'} else {' -'}) $($_.Name)"
            }
          } else {
            Write-Host "NO 'out' FOLDER"
          }

      - name: Validate built ControlManifest.xml
        run: |
          $expected = '${{ steps.version.outputs.version }}'
          $manifestPath = 'out/controls/AssessmentControl/ControlManifest.xml'

          if (-not (Test-Path $manifestPath)) {
            throw "ControlManifest.xml not found at $manifestPath"
          }

          $content = Get-Content $manifestPath -Raw
          if ($content -match 'version="([^"]+)"') {
            $actual = $matches[1]
            if ($actual -eq $expected) {
              Write-Host "VERSION OK: $actual"
            } else {
              throw "VERSION MISMATCH! Expected: $expected, Got: $actual"
            }
          } else {
            throw "No version in manifest"
          }

      - name: Upload PCF control artifact
        uses: actions/upload-artifact@v4
        with:
          name: assessment-pcf-control
          path: AssessmentPCFControl/out/   # CHEMIN ABSOLU DEPUIS LA RACINE DU REPO
          retention-days: 7
          if-no-files-found: error

  # === SOLUTION BUILD (inchangÃ©) ===
  solution-build:
    runs-on: windows-latest
    needs: pcf-build
    permissions:
      contents: write
      packages: write
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.x

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install PCF dependencies
        run: npm ci
        working-directory: AssessmentPCFControl

      - name: Update solution version
        run: |
          $version = '${{ needs.pcf-build.outputs.version }}'
          $path = 'src/Other/Solution.xml'
          [xml]$xml = Get-Content $path -Raw
          $xml.ImportExportXml.SolutionManifest.Version = $version
          $xml.Save($path)

      - name: Build solution
        run: dotnet build AssessmentPCF.cdsproj /p:Configuration=Release

      - name: Rename packages
        run: |
          $v = '${{ needs.pcf-build.outputs.version }}'
          $dir = 'bin/Release'
          Get-ChildItem "$dir/*.zip" | ForEach-Object {
            $new = $_.Name -replace '\.zip$', "_v$v.zip"
            Rename-Item $_.FullName "$dir/$new"
          }

      - name: Validate packages
        run: |
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $req = @('solution.xml','customizations.xml','[Content_Types].xml')
          Get-ChildItem bin/Release -Filter *.zip | ForEach-Object {
            $zip = [IO.Compression.ZipFile]::OpenRead($_.FullName)
            $missing = $req | Where-Object { $zip.Entries.FullName -notcontains $_ }
            if ($missing) { throw "MISSING in $($_.Name): $missing" }
            $zip.Dispose()
          }

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $v = '${{ needs.pcf-build.outputs.version }}'
          $tag = "v$v"
          $asset = "bin/Release/AssessmentPCF_v$v.zip"
          gh release delete $tag --yes --cleanup-tag 2>$null || true
          gh release create $tag $asset --title "v$v" --notes "Build #${{ github.run_number }}"